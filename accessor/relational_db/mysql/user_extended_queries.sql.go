// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user_extended_queries.sql

package mysql

import (
	"context"
)

const deleteStudentById = `-- name: DeleteStudentById :exec
DELETE FROM student
WHERE id = ?
`

func (q *Queries) DeleteStudentById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentById, id)
	return err
}

const deleteStudentByUserId = `-- name: DeleteStudentByUserId :exec
DELETE FROM student
WHERE user_id = ?
`

func (q *Queries) DeleteStudentByUserId(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentByUserId, userID)
	return err
}

const deleteTeacherById = `-- name: DeleteTeacherById :exec
DELETE FROM teacher
WHERE id = ?
`

func (q *Queries) DeleteTeacherById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherById, id)
	return err
}

const deleteTeacherByUserId = `-- name: DeleteTeacherByUserId :exec
DELETE FROM teacher
WHERE user_id = ?
`

func (q *Queries) DeleteTeacherByUserId(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherByUserId, userID)
	return err
}

const getStudentById = `-- name: GetStudentById :one
SELECT id, user_id FROM student
WHERE id = ? LIMIT 1
`

// ============================== STUDENT ==============================
func (q *Queries) GetStudentById(ctx context.Context, id int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentById, id)
	var i Student
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const getStudentByUserId = `-- name: GetStudentByUserId :one
SELECT id, user_id FROM student
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetStudentByUserId(ctx context.Context, userID int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentByUserId, userID)
	var i Student
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const getTeacherById = `-- name: GetTeacherById :one
SELECT id, user_id FROM teacher
WHERE id = ? LIMIT 1
`

// ============================== TEACHER ==============================
func (q *Queries) GetTeacherById(ctx context.Context, id int64) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, getTeacherById, id)
	var i Teacher
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const getTeacherByUserId = `-- name: GetTeacherByUserId :one
SELECT id, user_id FROM teacher
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetTeacherByUserId(ctx context.Context, userID int64) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, getTeacherByUserId, userID)
	var i Teacher
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const insertStudent = `-- name: InsertStudent :execlastid
INSERT INTO student ( user_id ) VALUES ( ? )
`

func (q *Queries) InsertStudent(ctx context.Context, userID int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertStudent, userID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertTeacher = `-- name: InsertTeacher :execlastid
INSERT INTO teacher ( user_id ) VALUES ( ? )
`

func (q *Queries) InsertTeacher(ctx context.Context, userID int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertTeacher, userID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
