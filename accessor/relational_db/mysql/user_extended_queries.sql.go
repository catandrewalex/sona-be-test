// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user_extended_queries.sql

package mysql

import (
	"context"
	"database/sql"
	"encoding/json"
)

const countStudents = `-- name: CountStudents :one
SELECT Count(user_id) as total_results FROM student
`

func (q *Queries) CountStudents(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countStudents)
	var total_results int64
	err := row.Scan(&total_results)
	return total_results, err
}

const countTeachers = `-- name: CountTeachers :one
SELECT Count(user_id) as total_results FROM teacher
`

func (q *Queries) CountTeachers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTeachers)
	var total_results int64
	err := row.Scan(&total_results)
	return total_results, err
}

const deleteStudentById = `-- name: DeleteStudentById :exec
DELETE FROM student
WHERE id = ?
`

func (q *Queries) DeleteStudentById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentById, id)
	return err
}

const deleteStudentByUserId = `-- name: DeleteStudentByUserId :exec
DELETE FROM student
WHERE user_id = ?
`

func (q *Queries) DeleteStudentByUserId(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentByUserId, userID)
	return err
}

const deleteTeacherById = `-- name: DeleteTeacherById :exec
DELETE FROM teacher
WHERE id = ?
`

func (q *Queries) DeleteTeacherById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherById, id)
	return err
}

const deleteTeacherByUserId = `-- name: DeleteTeacherByUserId :exec
DELETE FROM teacher
WHERE user_id = ?
`

func (q *Queries) DeleteTeacherByUserId(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherByUserId, userID)
	return err
}

const getStudentById = `-- name: GetStudentById :one
SELECT student.id, user.id AS user_id, username, email, user_detail, privilege_type, is_deactivated, created_at
FROM student JOIN user ON student.user_id = user.id
WHERE student.id = ? LIMIT 1
`

type GetStudentByIdRow struct {
	ID            int64
	UserID        int64
	Username      string
	Email         string
	UserDetail    json.RawMessage
	PrivilegeType int32
	IsDeactivated int32
	CreatedAt     sql.NullTime
}

// ============================== STUDENT ==============================
func (q *Queries) GetStudentById(ctx context.Context, id int64) (GetStudentByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getStudentById, id)
	var i GetStudentByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.UserDetail,
		&i.PrivilegeType,
		&i.IsDeactivated,
		&i.CreatedAt,
	)
	return i, err
}

const getStudentByUserId = `-- name: GetStudentByUserId :one
SELECT student.id, user.id AS user_id, username, email, user_detail, privilege_type, is_deactivated, created_at
FROM student JOIN user ON student.user_id = user.id
WHERE user_id = ? LIMIT 1
`

type GetStudentByUserIdRow struct {
	ID            int64
	UserID        int64
	Username      string
	Email         string
	UserDetail    json.RawMessage
	PrivilegeType int32
	IsDeactivated int32
	CreatedAt     sql.NullTime
}

func (q *Queries) GetStudentByUserId(ctx context.Context, userID int64) (GetStudentByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, getStudentByUserId, userID)
	var i GetStudentByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.UserDetail,
		&i.PrivilegeType,
		&i.IsDeactivated,
		&i.CreatedAt,
	)
	return i, err
}

const getStudents = `-- name: GetStudents :many
SELECT student.id, user.id AS user_id, username, email, user_detail, privilege_type, is_deactivated, created_at
FROM student JOIN user ON student.user_id = user.id
ORDER BY username
LIMIT ? OFFSET ?
`

type GetStudentsParams struct {
	Limit  int32
	Offset int32
}

type GetStudentsRow struct {
	ID            int64
	UserID        int64
	Username      string
	Email         string
	UserDetail    json.RawMessage
	PrivilegeType int32
	IsDeactivated int32
	CreatedAt     sql.NullTime
}

func (q *Queries) GetStudents(ctx context.Context, arg GetStudentsParams) ([]GetStudentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentsRow
	for rows.Next() {
		var i GetStudentsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.UserDetail,
			&i.PrivilegeType,
			&i.IsDeactivated,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeacherById = `-- name: GetTeacherById :one
SELECT teacher.id, user.id AS user_id, username, email, user_detail, privilege_type, is_deactivated, created_at
FROM teacher JOIN user ON teacher.user_id = user.id
WHERE teacher.id = ? LIMIT 1
`

type GetTeacherByIdRow struct {
	ID            int64
	UserID        int64
	Username      string
	Email         string
	UserDetail    json.RawMessage
	PrivilegeType int32
	IsDeactivated int32
	CreatedAt     sql.NullTime
}

// ============================== TEACHER ==============================
func (q *Queries) GetTeacherById(ctx context.Context, id int64) (GetTeacherByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTeacherById, id)
	var i GetTeacherByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.UserDetail,
		&i.PrivilegeType,
		&i.IsDeactivated,
		&i.CreatedAt,
	)
	return i, err
}

const getTeacherByUserId = `-- name: GetTeacherByUserId :one
SELECT teacher.id, user.id AS user_id, username, email, user_detail, privilege_type, is_deactivated, created_at
FROM teacher JOIN user ON teacher.user_id = user.id
WHERE user_id = ? LIMIT 1
`

type GetTeacherByUserIdRow struct {
	ID            int64
	UserID        int64
	Username      string
	Email         string
	UserDetail    json.RawMessage
	PrivilegeType int32
	IsDeactivated int32
	CreatedAt     sql.NullTime
}

func (q *Queries) GetTeacherByUserId(ctx context.Context, userID int64) (GetTeacherByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTeacherByUserId, userID)
	var i GetTeacherByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.UserDetail,
		&i.PrivilegeType,
		&i.IsDeactivated,
		&i.CreatedAt,
	)
	return i, err
}

const getTeachers = `-- name: GetTeachers :many
SELECT teacher.id, user.id AS user_id, username, email, user_detail, privilege_type, is_deactivated, created_at, Count(user_id) as total_results
FROM teacher JOIN user ON teacher.user_id = user.id
ORDER BY username
LIMIT ? OFFSET ?
`

type GetTeachersParams struct {
	Limit  int32
	Offset int32
}

type GetTeachersRow struct {
	ID            int64
	UserID        int64
	Username      string
	Email         string
	UserDetail    json.RawMessage
	PrivilegeType int32
	IsDeactivated int32
	CreatedAt     sql.NullTime
	TotalResults  int64
}

func (q *Queries) GetTeachers(ctx context.Context, arg GetTeachersParams) ([]GetTeachersRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeachers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeachersRow
	for rows.Next() {
		var i GetTeachersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.UserDetail,
			&i.PrivilegeType,
			&i.IsDeactivated,
			&i.CreatedAt,
			&i.TotalResults,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertStudent = `-- name: InsertStudent :execlastid
INSERT INTO student ( user_id ) VALUES ( ? )
`

func (q *Queries) InsertStudent(ctx context.Context, userID int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertStudent, userID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertTeacher = `-- name: InsertTeacher :execlastid
INSERT INTO teacher ( user_id ) VALUES ( ? )
`

func (q *Queries) InsertTeacher(ctx context.Context, userID int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertTeacher, userID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
