// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: payment_queries.sql

package mysql

import (
	"context"
	"database/sql"
	"time"
)

const deleteEnrollmentPaymentById = `-- name: DeleteEnrollmentPaymentById :exec
DELETE FROM enrollment_payment
WHERE id = ?
`

func (q *Queries) DeleteEnrollmentPaymentById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEnrollmentPaymentById, id)
	return err
}

const deleteStudentLearningTokenById = `-- name: DeleteStudentLearningTokenById :exec
DELETE FROM student_learning_token
WHERE id = ?
`

func (q *Queries) DeleteStudentLearningTokenById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentLearningTokenById, id)
	return err
}

const deleteTeacherSalaryById = `-- name: DeleteTeacherSalaryById :exec
DELETE FROM teacher_salary
WHERE id = ?
`

func (q *Queries) DeleteTeacherSalaryById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherSalaryById, id)
	return err
}

const getEnrollmentPaymentById = `-- name: GetEnrollmentPaymentById :one
SELECT id, payment_date, balance_top_up, value, value_penalty, enrollment_id FROM enrollment_payment
WHERE id = ? LIMIT 1
`

// ============================== ENROLLMENT_PAYMENT ==============================
func (q *Queries) GetEnrollmentPaymentById(ctx context.Context, id int64) (EnrollmentPayment, error) {
	row := q.db.QueryRowContext(ctx, getEnrollmentPaymentById, id)
	var i EnrollmentPayment
	err := row.Scan(
		&i.ID,
		&i.PaymentDate,
		&i.BalanceTopUp,
		&i.Value,
		&i.ValuePenalty,
		&i.EnrollmentID,
	)
	return i, err
}

const getStudentLearningTokenById = `-- name: GetStudentLearningTokenById :one
SELECT id, quota, quota_bonus, course_fee_value, transport_fee_value, last_updated_at, enrollment_id FROM student_learning_token
WHERE id = ? LIMIT 1
`

// ============================== STUDENT_LEARNING_TOKEN ==============================
func (q *Queries) GetStudentLearningTokenById(ctx context.Context, id int64) (StudentLearningToken, error) {
	row := q.db.QueryRowContext(ctx, getStudentLearningTokenById, id)
	var i StudentLearningToken
	err := row.Scan(
		&i.ID,
		&i.Quota,
		&i.QuotaBonus,
		&i.CourseFeeValue,
		&i.TransportFeeValue,
		&i.LastUpdatedAt,
		&i.EnrollmentID,
	)
	return i, err
}

const getStudentLearningTokensByEnrollmentId = `-- name: GetStudentLearningTokensByEnrollmentId :many
SELECT id, quota, quota_bonus, course_fee_value, transport_fee_value, last_updated_at, enrollment_id FROM student_learning_token
WHERE enrollment_id = ?
`

func (q *Queries) GetStudentLearningTokensByEnrollmentId(ctx context.Context, enrollmentID sql.NullInt64) ([]StudentLearningToken, error) {
	rows, err := q.db.QueryContext(ctx, getStudentLearningTokensByEnrollmentId, enrollmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentLearningToken
	for rows.Next() {
		var i StudentLearningToken
		if err := rows.Scan(
			&i.ID,
			&i.Quota,
			&i.QuotaBonus,
			&i.CourseFeeValue,
			&i.TransportFeeValue,
			&i.LastUpdatedAt,
			&i.EnrollmentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeacherSalaryById = `-- name: GetTeacherSalaryById :one
SELECT id, presence_id, course_fee_value, transport_fee_value, profit_sharing_percentage, added_at FROM teacher_salary
WHERE id = ? LIMIT 1
`

// ============================== TEACHER_SALARY ==============================
func (q *Queries) GetTeacherSalaryById(ctx context.Context, id int64) (TeacherSalary, error) {
	row := q.db.QueryRowContext(ctx, getTeacherSalaryById, id)
	var i TeacherSalary
	err := row.Scan(
		&i.ID,
		&i.PresenceID,
		&i.CourseFeeValue,
		&i.TransportFeeValue,
		&i.ProfitSharingPercentage,
		&i.AddedAt,
	)
	return i, err
}

const insertEnrollmentPayment = `-- name: InsertEnrollmentPayment :execlastid
INSERT INTO enrollment_payment (
    payment_date, balance_top_up, value, value_penalty, enrollment_id
) VALUES (
    ?, ?, ?, ?, ?
)
`

type InsertEnrollmentPaymentParams struct {
	PaymentDate  time.Time
	BalanceTopUp int32
	Value        int32
	ValuePenalty int32
	EnrollmentID sql.NullInt64
}

func (q *Queries) InsertEnrollmentPayment(ctx context.Context, arg InsertEnrollmentPaymentParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertEnrollmentPayment,
		arg.PaymentDate,
		arg.BalanceTopUp,
		arg.Value,
		arg.ValuePenalty,
		arg.EnrollmentID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertStudentLearningToken = `-- name: InsertStudentLearningToken :execlastid
INSERT INTO student_learning_token (
    quota, quota_bonus, course_fee_value, transport_fee_value, last_updated_at, enrollment_id
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type InsertStudentLearningTokenParams struct {
	Quota             int32
	QuotaBonus        int32
	CourseFeeValue    int32
	TransportFeeValue int32
	LastUpdatedAt     time.Time
	EnrollmentID      sql.NullInt64
}

func (q *Queries) InsertStudentLearningToken(ctx context.Context, arg InsertStudentLearningTokenParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertStudentLearningToken,
		arg.Quota,
		arg.QuotaBonus,
		arg.CourseFeeValue,
		arg.TransportFeeValue,
		arg.LastUpdatedAt,
		arg.EnrollmentID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertTeacherSalary = `-- name: InsertTeacherSalary :execlastid
INSERT INTO teacher_salary (
    presence_id, course_fee_value, transport_fee_value, profit_sharing_percentage, added_at
) VALUES (
    ?, ?, ?, ?, ?
)
`

type InsertTeacherSalaryParams struct {
	PresenceID              int64
	CourseFeeValue          int32
	TransportFeeValue       int32
	ProfitSharingPercentage float64
	AddedAt                 time.Time
}

func (q *Queries) InsertTeacherSalary(ctx context.Context, arg InsertTeacherSalaryParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertTeacherSalary,
		arg.PresenceID,
		arg.CourseFeeValue,
		arg.TransportFeeValue,
		arg.ProfitSharingPercentage,
		arg.AddedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
