// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: non_user_queries.sql

package mysql

import (
	"context"
	"database/sql"
	"time"
)

const deleteClassById = `-- name: DeleteClassById :exec
DELETE FROM class
WHERE id = ?
`

func (q *Queries) DeleteClassById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClassById, id)
	return err
}

const deleteCourseById = `-- name: DeleteCourseById :exec
DELETE FROM course
WHERE id = ?
`

func (q *Queries) DeleteCourseById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCourseById, id)
	return err
}

const deleteEnrollmentPaymentById = `-- name: DeleteEnrollmentPaymentById :exec
DELETE FROM enrollment_payment
WHERE id = ?
`

func (q *Queries) DeleteEnrollmentPaymentById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEnrollmentPaymentById, id)
	return err
}

const deleteGradeById = `-- name: DeleteGradeById :exec
DELETE FROM grade
WHERE id = ?
`

func (q *Queries) DeleteGradeById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGradeById, id)
	return err
}

const deleteInstrumentById = `-- name: DeleteInstrumentById :exec
DELETE FROM instrument
WHERE id = ?
`

func (q *Queries) DeleteInstrumentById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInstrumentById, id)
	return err
}

const deletePresenceById = `-- name: DeletePresenceById :exec
DELETE FROM presence
WHERE id = ?
`

func (q *Queries) DeletePresenceById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePresenceById, id)
	return err
}

const deleteStudentAttend = `-- name: DeleteStudentAttend :exec
DELETE FROM student_attend
WHERE student_id = ? AND presence_id = ?
`

type DeleteStudentAttendParams struct {
	StudentID  int64
	PresenceID int64
}

func (q *Queries) DeleteStudentAttend(ctx context.Context, arg DeleteStudentAttendParams) error {
	_, err := q.db.ExecContext(ctx, deleteStudentAttend, arg.StudentID, arg.PresenceID)
	return err
}

const deleteStudentAttendByPresenceId = `-- name: DeleteStudentAttendByPresenceId :exec
DELETE FROM student_attend
WHERE presence_id = ?
`

func (q *Queries) DeleteStudentAttendByPresenceId(ctx context.Context, presenceID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentAttendByPresenceId, presenceID)
	return err
}

const deleteStudentAttendByStudentId = `-- name: DeleteStudentAttendByStudentId :exec
DELETE FROM student_attend
WHERE student_id = ?
`

func (q *Queries) DeleteStudentAttendByStudentId(ctx context.Context, studentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentAttendByStudentId, studentID)
	return err
}

const deleteStudentEnrollmentByClassId = `-- name: DeleteStudentEnrollmentByClassId :exec
DELETE FROM student_enrollment
WHERE class_id = ?
`

func (q *Queries) DeleteStudentEnrollmentByClassId(ctx context.Context, classID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentEnrollmentByClassId, classID)
	return err
}

const deleteStudentEnrollmentById = `-- name: DeleteStudentEnrollmentById :exec
DELETE FROM student_enrollment
WHERE id = ?
`

func (q *Queries) DeleteStudentEnrollmentById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentEnrollmentById, id)
	return err
}

const deleteStudentEnrollmentByStudentId = `-- name: DeleteStudentEnrollmentByStudentId :exec
DELETE FROM student_enrollment
WHERE student_id = ?
`

func (q *Queries) DeleteStudentEnrollmentByStudentId(ctx context.Context, studentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentEnrollmentByStudentId, studentID)
	return err
}

const deleteStudentLearningTokenById = `-- name: DeleteStudentLearningTokenById :exec
DELETE FROM student_learning_token
WHERE id = ?
`

func (q *Queries) DeleteStudentLearningTokenById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentLearningTokenById, id)
	return err
}

const deleteTeacherSalaryById = `-- name: DeleteTeacherSalaryById :exec
DELETE FROM teacher_salary
WHERE id = ?
`

func (q *Queries) DeleteTeacherSalaryById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherSalaryById, id)
	return err
}

const deleteTeacherSpecialFeeById = `-- name: DeleteTeacherSpecialFeeById :exec
DELETE FROM teacher_special_fee
WHERE id = ?
`

func (q *Queries) DeleteTeacherSpecialFeeById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherSpecialFeeById, id)
	return err
}

const deleteTeacherSpecialFeeByTeacherId = `-- name: DeleteTeacherSpecialFeeByTeacherId :exec
DELETE FROM teacher_special_fee
WHERE teacher_id = ?
`

func (q *Queries) DeleteTeacherSpecialFeeByTeacherId(ctx context.Context, teacherID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherSpecialFeeByTeacherId, teacherID)
	return err
}

const getClassById = `-- name: GetClassById :one
SELECT id, default_transport_fee, teacher_id, course_id, is_deactivated FROM class
WHERE id = ? LIMIT 1
`

// ============================== CLASS ==============================
func (q *Queries) GetClassById(ctx context.Context, id int64) (Class, error) {
	row := q.db.QueryRowContext(ctx, getClassById, id)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.DefaultTransportFee,
		&i.TeacherID,
		&i.CourseID,
		&i.IsDeactivated,
	)
	return i, err
}

const getCourseById = `-- name: GetCourseById :one
SELECT id, default_fee, instrument_id, grade_id FROM course
WHERE id = ? LIMIT 1
`

// ============================== COURSE ==============================
func (q *Queries) GetCourseById(ctx context.Context, id int64) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourseById, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.DefaultFee,
		&i.InstrumentID,
		&i.GradeID,
	)
	return i, err
}

const getEnrollmentPaymentById = `-- name: GetEnrollmentPaymentById :one
SELECT id, payment_date, balance_top_up, value, value_penalty, enrollment_id FROM enrollment_payment
WHERE id = ? LIMIT 1
`

// ============================== ENROLLMENT_PAYMENT ==============================
func (q *Queries) GetEnrollmentPaymentById(ctx context.Context, id int64) (EnrollmentPayment, error) {
	row := q.db.QueryRowContext(ctx, getEnrollmentPaymentById, id)
	var i EnrollmentPayment
	err := row.Scan(
		&i.ID,
		&i.PaymentDate,
		&i.BalanceTopUp,
		&i.Value,
		&i.ValuePenalty,
		&i.EnrollmentID,
	)
	return i, err
}

const getGradeById = `-- name: GetGradeById :one
SELECT id, name FROM grade
WHERE id = ? LIMIT 1
`

// ============================== GRADE ==============================
func (q *Queries) GetGradeById(ctx context.Context, id int64) (Grade, error) {
	row := q.db.QueryRowContext(ctx, getGradeById, id)
	var i Grade
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getInstrumentById = `-- name: GetInstrumentById :one
SELECT id, name FROM instrument
WHERE id = ? LIMIT 1
`

// ============================== INSTRUMENT ==============================
func (q *Queries) GetInstrumentById(ctx context.Context, id int64) (Instrument, error) {
	row := q.db.QueryRowContext(ctx, getInstrumentById, id)
	var i Instrument
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPresenceById = `-- name: GetPresenceById :one
SELECT id, date, used_student_token_quota, duration, class_id, teacher_id, token_id FROM presence
WHERE id = ? LIMIT 1
`

// ============================== PRESENCE ==============================
func (q *Queries) GetPresenceById(ctx context.Context, id int64) (Presence, error) {
	row := q.db.QueryRowContext(ctx, getPresenceById, id)
	var i Presence
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.UsedStudentTokenQuota,
		&i.Duration,
		&i.ClassID,
		&i.TeacherID,
		&i.TokenID,
	)
	return i, err
}

const getPresencesByClassId = `-- name: GetPresencesByClassId :many
SELECT id, date, used_student_token_quota, duration, class_id, teacher_id, token_id FROM presence
WHERE class_id = ?
`

func (q *Queries) GetPresencesByClassId(ctx context.Context, classID sql.NullInt64) ([]Presence, error) {
	rows, err := q.db.QueryContext(ctx, getPresencesByClassId, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Presence
	for rows.Next() {
		var i Presence
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.UsedStudentTokenQuota,
			&i.Duration,
			&i.ClassID,
			&i.TeacherID,
			&i.TokenID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPresencesByTeacherId = `-- name: GetPresencesByTeacherId :many
SELECT id, date, used_student_token_quota, duration, class_id, teacher_id, token_id FROM presence
WHERE teacher_id = ?
`

func (q *Queries) GetPresencesByTeacherId(ctx context.Context, teacherID sql.NullInt64) ([]Presence, error) {
	rows, err := q.db.QueryContext(ctx, getPresencesByTeacherId, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Presence
	for rows.Next() {
		var i Presence
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.UsedStudentTokenQuota,
			&i.Duration,
			&i.ClassID,
			&i.TeacherID,
			&i.TokenID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentAttendsByPresenceId = `-- name: GetStudentAttendsByPresenceId :many
SELECT student_id, presence_id FROM student_attend
WHERE presence_id = ?
`

func (q *Queries) GetStudentAttendsByPresenceId(ctx context.Context, presenceID int64) ([]StudentAttend, error) {
	rows, err := q.db.QueryContext(ctx, getStudentAttendsByPresenceId, presenceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentAttend
	for rows.Next() {
		var i StudentAttend
		if err := rows.Scan(&i.StudentID, &i.PresenceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentAttendsByStudentId = `-- name: GetStudentAttendsByStudentId :many
SELECT student_id, presence_id FROM student_attend
WHERE student_id = ?
`

// ============================== STUDENT_ATTEND ==============================
func (q *Queries) GetStudentAttendsByStudentId(ctx context.Context, studentID int64) ([]StudentAttend, error) {
	rows, err := q.db.QueryContext(ctx, getStudentAttendsByStudentId, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentAttend
	for rows.Next() {
		var i StudentAttend
		if err := rows.Scan(&i.StudentID, &i.PresenceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentEnrollmentsByClassId = `-- name: GetStudentEnrollmentsByClassId :many
SELECT id, student_id, class_id FROM student_enrollment
WHERE class_id = ?
`

func (q *Queries) GetStudentEnrollmentsByClassId(ctx context.Context, classID int64) ([]StudentEnrollment, error) {
	rows, err := q.db.QueryContext(ctx, getStudentEnrollmentsByClassId, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentEnrollment
	for rows.Next() {
		var i StudentEnrollment
		if err := rows.Scan(&i.ID, &i.StudentID, &i.ClassID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentEnrollmentsByStudentId = `-- name: GetStudentEnrollmentsByStudentId :many
SELECT id, student_id, class_id FROM student_enrollment
WHERE student_id = ?
`

// ============================== STUDENT_ENROLLMENT ==============================
func (q *Queries) GetStudentEnrollmentsByStudentId(ctx context.Context, studentID int64) ([]StudentEnrollment, error) {
	rows, err := q.db.QueryContext(ctx, getStudentEnrollmentsByStudentId, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentEnrollment
	for rows.Next() {
		var i StudentEnrollment
		if err := rows.Scan(&i.ID, &i.StudentID, &i.ClassID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentLearningTokenById = `-- name: GetStudentLearningTokenById :one
SELECT id, quota, quota_bonus, course_fee_value, transport_fee_value, last_updated_at, enrollment_id FROM student_learning_token
WHERE id = ? LIMIT 1
`

// ============================== STUDENT_LEARNING_TOKEN ==============================
func (q *Queries) GetStudentLearningTokenById(ctx context.Context, id int64) (StudentLearningToken, error) {
	row := q.db.QueryRowContext(ctx, getStudentLearningTokenById, id)
	var i StudentLearningToken
	err := row.Scan(
		&i.ID,
		&i.Quota,
		&i.QuotaBonus,
		&i.CourseFeeValue,
		&i.TransportFeeValue,
		&i.LastUpdatedAt,
		&i.EnrollmentID,
	)
	return i, err
}

const getStudentLearningTokensByEnrollmentId = `-- name: GetStudentLearningTokensByEnrollmentId :many
SELECT id, quota, quota_bonus, course_fee_value, transport_fee_value, last_updated_at, enrollment_id FROM student_learning_token
WHERE enrollment_id = ?
`

func (q *Queries) GetStudentLearningTokensByEnrollmentId(ctx context.Context, enrollmentID sql.NullInt64) ([]StudentLearningToken, error) {
	rows, err := q.db.QueryContext(ctx, getStudentLearningTokensByEnrollmentId, enrollmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentLearningToken
	for rows.Next() {
		var i StudentLearningToken
		if err := rows.Scan(
			&i.ID,
			&i.Quota,
			&i.QuotaBonus,
			&i.CourseFeeValue,
			&i.TransportFeeValue,
			&i.LastUpdatedAt,
			&i.EnrollmentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeacherSalaryById = `-- name: GetTeacherSalaryById :one
SELECT id, presence_id, course_fee_value, transport_fee_value, profit_sharing_percentage, added_at FROM teacher_salary
WHERE id = ? LIMIT 1
`

// ============================== TEACHER_SALARY ==============================
func (q *Queries) GetTeacherSalaryById(ctx context.Context, id int64) (TeacherSalary, error) {
	row := q.db.QueryRowContext(ctx, getTeacherSalaryById, id)
	var i TeacherSalary
	err := row.Scan(
		&i.ID,
		&i.PresenceID,
		&i.CourseFeeValue,
		&i.TransportFeeValue,
		&i.ProfitSharingPercentage,
		&i.AddedAt,
	)
	return i, err
}

const getTeacherSpecialFeeById = `-- name: GetTeacherSpecialFeeById :one
SELECT id, fee, teacher_id, course_id FROM teacher_special_fee
WHERE id = ? LIMIT 1
`

// ============================== TEACHER_SPECIAL_FEE ==============================
func (q *Queries) GetTeacherSpecialFeeById(ctx context.Context, id int64) (TeacherSpecialFee, error) {
	row := q.db.QueryRowContext(ctx, getTeacherSpecialFeeById, id)
	var i TeacherSpecialFee
	err := row.Scan(
		&i.ID,
		&i.Fee,
		&i.TeacherID,
		&i.CourseID,
	)
	return i, err
}

const getTeacherSpecialFeesByTeacherId = `-- name: GetTeacherSpecialFeesByTeacherId :many
SELECT id, fee, teacher_id, course_id FROM teacher_special_fee
WHERE teacher_id = ?
`

func (q *Queries) GetTeacherSpecialFeesByTeacherId(ctx context.Context, teacherID int64) ([]TeacherSpecialFee, error) {
	rows, err := q.db.QueryContext(ctx, getTeacherSpecialFeesByTeacherId, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeacherSpecialFee
	for rows.Next() {
		var i TeacherSpecialFee
		if err := rows.Scan(
			&i.ID,
			&i.Fee,
			&i.TeacherID,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertClass = `-- name: InsertClass :execlastid
INSERT INTO class (
    id, default_transport_fee, teacher_id, course_id, is_deactivated
) VALUES (
    ?, ?, ?, ?, ?
)
`

type InsertClassParams struct {
	ID                  int64
	DefaultTransportFee int64
	TeacherID           sql.NullInt64
	CourseID            int64
	IsDeactivated       int32
}

func (q *Queries) InsertClass(ctx context.Context, arg InsertClassParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertClass,
		arg.ID,
		arg.DefaultTransportFee,
		arg.TeacherID,
		arg.CourseID,
		arg.IsDeactivated,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertCourse = `-- name: InsertCourse :execlastid
INSERT INTO course (
    id, default_fee, instrument_id, grade_id
) VALUES (
    ?, ?, ?, ?
)
`

type InsertCourseParams struct {
	ID           int64
	DefaultFee   int64
	InstrumentID int64
	GradeID      int64
}

func (q *Queries) InsertCourse(ctx context.Context, arg InsertCourseParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertCourse,
		arg.ID,
		arg.DefaultFee,
		arg.InstrumentID,
		arg.GradeID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertEnrollmentPayment = `-- name: InsertEnrollmentPayment :execlastid
INSERT INTO enrollment_payment (
    id, payment_date, balance_top_up, value, value_penalty, enrollment_id
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type InsertEnrollmentPaymentParams struct {
	ID           int64
	PaymentDate  time.Time
	BalanceTopUp int32
	Value        int32
	ValuePenalty int32
	EnrollmentID sql.NullInt64
}

func (q *Queries) InsertEnrollmentPayment(ctx context.Context, arg InsertEnrollmentPaymentParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertEnrollmentPayment,
		arg.ID,
		arg.PaymentDate,
		arg.BalanceTopUp,
		arg.Value,
		arg.ValuePenalty,
		arg.EnrollmentID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertGrade = `-- name: InsertGrade :execlastid
INSERT INTO grade (
    id, name
) VALUES (
    ?, ?
)
`

type InsertGradeParams struct {
	ID   int64
	Name string
}

func (q *Queries) InsertGrade(ctx context.Context, arg InsertGradeParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertGrade, arg.ID, arg.Name)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertInstrument = `-- name: InsertInstrument :execlastid
INSERT INTO instrument (
    id, name
) VALUES (
    ?, ?
)
`

type InsertInstrumentParams struct {
	ID   int64
	Name string
}

func (q *Queries) InsertInstrument(ctx context.Context, arg InsertInstrumentParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertInstrument, arg.ID, arg.Name)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertPresence = `-- name: InsertPresence :execlastid
INSERT INTO presence (
    id, date, used_student_token_quota, duration, class_id, teacher_id, token_id
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type InsertPresenceParams struct {
	ID                    int64
	Date                  time.Time
	UsedStudentTokenQuota float64
	Duration              int32
	ClassID               sql.NullInt64
	TeacherID             sql.NullInt64
	TokenID               int64
}

func (q *Queries) InsertPresence(ctx context.Context, arg InsertPresenceParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertPresence,
		arg.ID,
		arg.Date,
		arg.UsedStudentTokenQuota,
		arg.Duration,
		arg.ClassID,
		arg.TeacherID,
		arg.TokenID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertStudentAttend = `-- name: InsertStudentAttend :exec
INSERT INTO student_attend (
    student_id, presence_id
) VALUES (
    ?, ?
)
`

type InsertStudentAttendParams struct {
	StudentID  int64
	PresenceID int64
}

func (q *Queries) InsertStudentAttend(ctx context.Context, arg InsertStudentAttendParams) error {
	_, err := q.db.ExecContext(ctx, insertStudentAttend, arg.StudentID, arg.PresenceID)
	return err
}

const insertStudentEnrollment = `-- name: InsertStudentEnrollment :exec
INSERT INTO student_enrollment (
    id, student_id, class_id
) VALUES (
    ?, ?, ?
)
`

type InsertStudentEnrollmentParams struct {
	ID        int64
	StudentID int64
	ClassID   int64
}

func (q *Queries) InsertStudentEnrollment(ctx context.Context, arg InsertStudentEnrollmentParams) error {
	_, err := q.db.ExecContext(ctx, insertStudentEnrollment, arg.ID, arg.StudentID, arg.ClassID)
	return err
}

const insertStudentLearningToken = `-- name: InsertStudentLearningToken :execlastid
INSERT INTO student_learning_token (
    id, quota, quota_bonus, course_fee_value, transport_fee_value, last_updated_at, enrollment_id
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type InsertStudentLearningTokenParams struct {
	ID                int64
	Quota             int32
	QuotaBonus        int32
	CourseFeeValue    int32
	TransportFeeValue int32
	LastUpdatedAt     time.Time
	EnrollmentID      sql.NullInt64
}

func (q *Queries) InsertStudentLearningToken(ctx context.Context, arg InsertStudentLearningTokenParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertStudentLearningToken,
		arg.ID,
		arg.Quota,
		arg.QuotaBonus,
		arg.CourseFeeValue,
		arg.TransportFeeValue,
		arg.LastUpdatedAt,
		arg.EnrollmentID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertTeacherSalary = `-- name: InsertTeacherSalary :execlastid
INSERT INTO teacher_salary (
    id, presence_id, course_fee_value, transport_fee_value, profit_sharing_percentage, added_at
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type InsertTeacherSalaryParams struct {
	ID                      int64
	PresenceID              int64
	CourseFeeValue          int32
	TransportFeeValue       int32
	ProfitSharingPercentage float64
	AddedAt                 time.Time
}

func (q *Queries) InsertTeacherSalary(ctx context.Context, arg InsertTeacherSalaryParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertTeacherSalary,
		arg.ID,
		arg.PresenceID,
		arg.CourseFeeValue,
		arg.TransportFeeValue,
		arg.ProfitSharingPercentage,
		arg.AddedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertTeacherSpecialFee = `-- name: InsertTeacherSpecialFee :execlastid
INSERT INTO teacher_special_fee (
    id, fee, teacher_id, course_id
) VALUES (
    ?, ?, ?, ?
)
`

type InsertTeacherSpecialFeeParams struct {
	ID        int64
	Fee       int64
	TeacherID int64
	CourseID  int64
}

func (q *Queries) InsertTeacherSpecialFee(ctx context.Context, arg InsertTeacherSpecialFeeParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertTeacherSpecialFee,
		arg.ID,
		arg.Fee,
		arg.TeacherID,
		arg.CourseID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
