// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: presence_queries.sql

package mysql

import (
	"context"
	"database/sql"
	"time"
)

const deletePresenceById = `-- name: DeletePresenceById :exec
DELETE FROM presence
WHERE id = ?
`

func (q *Queries) DeletePresenceById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePresenceById, id)
	return err
}

const deleteStudentAttend = `-- name: DeleteStudentAttend :exec
DELETE FROM student_attend
WHERE student_id = ? AND presence_id = ?
`

type DeleteStudentAttendParams struct {
	StudentID  int64
	PresenceID int64
}

func (q *Queries) DeleteStudentAttend(ctx context.Context, arg DeleteStudentAttendParams) error {
	_, err := q.db.ExecContext(ctx, deleteStudentAttend, arg.StudentID, arg.PresenceID)
	return err
}

const deleteStudentAttendByPresenceId = `-- name: DeleteStudentAttendByPresenceId :exec
DELETE FROM student_attend
WHERE presence_id = ?
`

func (q *Queries) DeleteStudentAttendByPresenceId(ctx context.Context, presenceID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentAttendByPresenceId, presenceID)
	return err
}

const deleteStudentAttendByStudentId = `-- name: DeleteStudentAttendByStudentId :exec
DELETE FROM student_attend
WHERE student_id = ?
`

func (q *Queries) DeleteStudentAttendByStudentId(ctx context.Context, studentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentAttendByStudentId, studentID)
	return err
}

const getPresenceById = `-- name: GetPresenceById :one
SELECT presence.id AS presence_id, date, used_student_token_quota, duration,
    presence.teacher_id AS teacher_id, user_teacher.username AS teacher_username, user_teacher.user_detail AS teacher_detail,
    class.id AS class_id, course_id, CONCAT_WS(' ', instrument.name, grade.name) AS course_name,
    sa.student_id AS student_id, user_student.username AS student_username, user_student.user_detail AS student_detail,
    slt.course_fee_value AS course_fee_value, slt.transport_fee_value AS transport_fee_value
FROM presence
    LEFT JOIN teacher ON presence.teacher_id = teacher.id
    LEFT JOIN user AS user_teacher ON teacher.user_id = user_teacher.id

    LEFT JOIN class on presence.class_id = class.id
    LEFT JOIN course ON course_id = course.id
    LEFT JOIN instrument ON course.instrument_id = instrument.id
    LEFT JOIN grade ON course.grade_id = grade.id

    LEFT JOIN student_attend AS sa ON presence.id = sa.presence_id
    LEFT JOIN user AS user_student ON sa.student_id = user_student.id

    JOIN student_learning_token as slt ON presence.token_id = slt.id
WHERE presence.id = ? LIMIT 1
`

type GetPresenceByIdRow struct {
	PresenceID            int64
	Date                  time.Time
	UsedStudentTokenQuota float64
	Duration              int32
	TeacherID             sql.NullInt64
	TeacherUsername       sql.NullString
	TeacherDetail         []byte
	ClassID               sql.NullInt64
	CourseID              sql.NullInt64
	CourseName            string
	StudentID             sql.NullInt64
	StudentUsername       sql.NullString
	StudentDetail         []byte
	CourseFeeValue        int32
	TransportFeeValue     int32
}

// ============================== PRESENCE ==============================
func (q *Queries) GetPresenceById(ctx context.Context, id int64) (GetPresenceByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPresenceById, id)
	var i GetPresenceByIdRow
	err := row.Scan(
		&i.PresenceID,
		&i.Date,
		&i.UsedStudentTokenQuota,
		&i.Duration,
		&i.TeacherID,
		&i.TeacherUsername,
		&i.TeacherDetail,
		&i.ClassID,
		&i.CourseID,
		&i.CourseName,
		&i.StudentID,
		&i.StudentUsername,
		&i.StudentDetail,
		&i.CourseFeeValue,
		&i.TransportFeeValue,
	)
	return i, err
}

const getPresences = `-- name: GetPresences :many
SELECT presence.id AS presence_id, date, used_student_token_quota, duration,
    presence.teacher_id AS teacher_id, user_teacher.username AS teacher_username, user_teacher.user_detail AS teacher_detail,
    class.id AS class_id, course_id, CONCAT_WS(' ', instrument.name, grade.name) AS course_name,
    sa.student_id AS student_id, user_student.username AS student_username, user_student.user_detail AS student_detail,
    slt.course_fee_value AS course_fee_value, slt.transport_fee_value AS transport_fee_value
FROM presence
    LEFT JOIN teacher ON presence.teacher_id = teacher.id
    LEFT JOIN user AS user_teacher ON teacher.user_id = user_teacher.id

    LEFT JOIN class on presence.class_id = class.id
    LEFT JOIN course ON course_id = course.id
    LEFT JOIN instrument ON course.instrument_id = instrument.id
    LEFT JOIN grade ON course.grade_id = grade.id

    LEFT JOIN student_attend AS sa ON presence.id = sa.presence_id
    LEFT JOIN user AS user_student ON sa.student_id = user_student.id

    JOIN student_learning_token as slt ON presence.token_id = slt.id
ORDER BY class.id
`

type GetPresencesRow struct {
	PresenceID            int64
	Date                  time.Time
	UsedStudentTokenQuota float64
	Duration              int32
	TeacherID             sql.NullInt64
	TeacherUsername       sql.NullString
	TeacherDetail         []byte
	ClassID               sql.NullInt64
	CourseID              sql.NullInt64
	CourseName            string
	StudentID             sql.NullInt64
	StudentUsername       sql.NullString
	StudentDetail         []byte
	CourseFeeValue        int32
	TransportFeeValue     int32
}

func (q *Queries) GetPresences(ctx context.Context) ([]GetPresencesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPresences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPresencesRow
	for rows.Next() {
		var i GetPresencesRow
		if err := rows.Scan(
			&i.PresenceID,
			&i.Date,
			&i.UsedStudentTokenQuota,
			&i.Duration,
			&i.TeacherID,
			&i.TeacherUsername,
			&i.TeacherDetail,
			&i.ClassID,
			&i.CourseID,
			&i.CourseName,
			&i.StudentID,
			&i.StudentUsername,
			&i.StudentDetail,
			&i.CourseFeeValue,
			&i.TransportFeeValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPresencesByClassId = `-- name: GetPresencesByClassId :many
SELECT presence.id AS presence_id, date, used_student_token_quota, duration,
    presence.teacher_id AS teacher_id, user_teacher.username AS teacher_username, user_teacher.user_detail AS teacher_detail,
    class.id AS class_id, course_id, CONCAT_WS(' ', instrument.name, grade.name) AS course_name,
    sa.student_id AS student_id, user_student.username AS student_username, user_student.user_detail AS student_detail,
    slt.course_fee_value AS course_fee_value, slt.transport_fee_value AS transport_fee_value
FROM presence
    LEFT JOIN teacher ON presence.teacher_id = teacher.id
    LEFT JOIN user AS user_teacher ON teacher.user_id = user_teacher.id

    LEFT JOIN class on presence.class_id = class.id
    LEFT JOIN course ON course_id = course.id
    LEFT JOIN instrument ON course.instrument_id = instrument.id
    LEFT JOIN grade ON course.grade_id = grade.id

    LEFT JOIN student_attend AS sa ON presence.id = sa.presence_id
    LEFT JOIN user AS user_student ON sa.student_id = user_student.id

    JOIN student_learning_token as slt ON presence.token_id = slt.id
WHERE class.id = ?
ORDER BY class.id
`

type GetPresencesByClassIdRow struct {
	PresenceID            int64
	Date                  time.Time
	UsedStudentTokenQuota float64
	Duration              int32
	TeacherID             sql.NullInt64
	TeacherUsername       sql.NullString
	TeacherDetail         []byte
	ClassID               sql.NullInt64
	CourseID              sql.NullInt64
	CourseName            string
	StudentID             sql.NullInt64
	StudentUsername       sql.NullString
	StudentDetail         []byte
	CourseFeeValue        int32
	TransportFeeValue     int32
}

func (q *Queries) GetPresencesByClassId(ctx context.Context, id int64) ([]GetPresencesByClassIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getPresencesByClassId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPresencesByClassIdRow
	for rows.Next() {
		var i GetPresencesByClassIdRow
		if err := rows.Scan(
			&i.PresenceID,
			&i.Date,
			&i.UsedStudentTokenQuota,
			&i.Duration,
			&i.TeacherID,
			&i.TeacherUsername,
			&i.TeacherDetail,
			&i.ClassID,
			&i.CourseID,
			&i.CourseName,
			&i.StudentID,
			&i.StudentUsername,
			&i.StudentDetail,
			&i.CourseFeeValue,
			&i.TransportFeeValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPresencesByTeacherId = `-- name: GetPresencesByTeacherId :many
SELECT presence.id AS presence_id, date, used_student_token_quota, duration,
    presence.teacher_id AS teacher_id, user_teacher.username AS teacher_username, user_teacher.user_detail AS teacher_detail,
    class.id AS class_id, course_id, CONCAT_WS(' ', instrument.name, grade.name) AS course_name,
    sa.student_id AS student_id, user_student.username AS student_username, user_student.user_detail AS student_detail,
    slt.course_fee_value AS course_fee_value, slt.transport_fee_value AS transport_fee_value
FROM presence
    LEFT JOIN teacher ON presence.teacher_id = teacher.id
    LEFT JOIN user AS user_teacher ON teacher.user_id = user_teacher.id

    LEFT JOIN class on presence.class_id = class.id
    LEFT JOIN course ON course_id = course.id
    LEFT JOIN instrument ON course.instrument_id = instrument.id
    LEFT JOIN grade ON course.grade_id = grade.id

    LEFT JOIN student_attend AS sa ON presence.id = sa.presence_id
    LEFT JOIN user AS user_student ON sa.student_id = user_student.id

    JOIN student_learning_token as slt ON presence.token_id = slt.id
WHERE presence.teacher_id = ?
ORDER BY class.id
`

type GetPresencesByTeacherIdRow struct {
	PresenceID            int64
	Date                  time.Time
	UsedStudentTokenQuota float64
	Duration              int32
	TeacherID             sql.NullInt64
	TeacherUsername       sql.NullString
	TeacherDetail         []byte
	ClassID               sql.NullInt64
	CourseID              sql.NullInt64
	CourseName            string
	StudentID             sql.NullInt64
	StudentUsername       sql.NullString
	StudentDetail         []byte
	CourseFeeValue        int32
	TransportFeeValue     int32
}

func (q *Queries) GetPresencesByTeacherId(ctx context.Context, teacherID sql.NullInt64) ([]GetPresencesByTeacherIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getPresencesByTeacherId, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPresencesByTeacherIdRow
	for rows.Next() {
		var i GetPresencesByTeacherIdRow
		if err := rows.Scan(
			&i.PresenceID,
			&i.Date,
			&i.UsedStudentTokenQuota,
			&i.Duration,
			&i.TeacherID,
			&i.TeacherUsername,
			&i.TeacherDetail,
			&i.ClassID,
			&i.CourseID,
			&i.CourseName,
			&i.StudentID,
			&i.StudentUsername,
			&i.StudentDetail,
			&i.CourseFeeValue,
			&i.TransportFeeValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentAttendsByPresenceId = `-- name: GetStudentAttendsByPresenceId :many
SELECT student_id, presence_id FROM student_attend
WHERE presence_id = ?
`

func (q *Queries) GetStudentAttendsByPresenceId(ctx context.Context, presenceID int64) ([]StudentAttend, error) {
	rows, err := q.db.QueryContext(ctx, getStudentAttendsByPresenceId, presenceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentAttend
	for rows.Next() {
		var i StudentAttend
		if err := rows.Scan(&i.StudentID, &i.PresenceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentAttendsByStudentId = `-- name: GetStudentAttendsByStudentId :many
SELECT student_id, presence_id FROM student_attend
WHERE student_id = ?
`

// ============================== STUDENT_ATTEND ==============================
func (q *Queries) GetStudentAttendsByStudentId(ctx context.Context, studentID int64) ([]StudentAttend, error) {
	rows, err := q.db.QueryContext(ctx, getStudentAttendsByStudentId, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentAttend
	for rows.Next() {
		var i StudentAttend
		if err := rows.Scan(&i.StudentID, &i.PresenceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPresence = `-- name: InsertPresence :execlastid
INSERT INTO presence (
    date, used_student_token_quota, duration, class_id, teacher_id, token_id
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type InsertPresenceParams struct {
	Date                  time.Time
	UsedStudentTokenQuota float64
	Duration              int32
	ClassID               sql.NullInt64
	TeacherID             sql.NullInt64
	TokenID               int64
}

func (q *Queries) InsertPresence(ctx context.Context, arg InsertPresenceParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertPresence,
		arg.Date,
		arg.UsedStudentTokenQuota,
		arg.Duration,
		arg.ClassID,
		arg.TeacherID,
		arg.TokenID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertStudentAttend = `-- name: InsertStudentAttend :exec
INSERT INTO student_attend (
    student_id, presence_id
) VALUES (
    ?, ?
)
`

type InsertStudentAttendParams struct {
	StudentID  int64
	PresenceID int64
}

func (q *Queries) InsertStudentAttend(ctx context.Context, arg InsertStudentAttendParams) error {
	_, err := q.db.ExecContext(ctx, insertStudentAttend, arg.StudentID, arg.PresenceID)
	return err
}

const updatePresence = `-- name: UpdatePresence :exec
UPDATE presence
SET date = ?, used_student_token_quota = ?, duration = ?, class_id = ?, teacher_id = ?, token_id = ?
WHERE id = ?
`

type UpdatePresenceParams struct {
	Date                  time.Time
	UsedStudentTokenQuota float64
	Duration              int32
	ClassID               sql.NullInt64
	TeacherID             sql.NullInt64
	TokenID               int64
	ID                    int64
}

func (q *Queries) UpdatePresence(ctx context.Context, arg UpdatePresenceParams) error {
	_, err := q.db.ExecContext(ctx, updatePresence,
		arg.Date,
		arg.UsedStudentTokenQuota,
		arg.Duration,
		arg.ClassID,
		arg.TeacherID,
		arg.TokenID,
		arg.ID,
	)
	return err
}
