// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: presence_queries.sql

package mysql

import (
	"context"
	"database/sql"
	"time"
)

const deletePresenceById = `-- name: DeletePresenceById :exec
DELETE FROM presence
WHERE id = ?
`

func (q *Queries) DeletePresenceById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePresenceById, id)
	return err
}

const deleteStudentAttend = `-- name: DeleteStudentAttend :exec
DELETE FROM student_attend
WHERE student_id = ? AND presence_id = ?
`

type DeleteStudentAttendParams struct {
	StudentID  int64
	PresenceID int64
}

func (q *Queries) DeleteStudentAttend(ctx context.Context, arg DeleteStudentAttendParams) error {
	_, err := q.db.ExecContext(ctx, deleteStudentAttend, arg.StudentID, arg.PresenceID)
	return err
}

const deleteStudentAttendByPresenceId = `-- name: DeleteStudentAttendByPresenceId :exec
DELETE FROM student_attend
WHERE presence_id = ?
`

func (q *Queries) DeleteStudentAttendByPresenceId(ctx context.Context, presenceID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentAttendByPresenceId, presenceID)
	return err
}

const deleteStudentAttendByStudentId = `-- name: DeleteStudentAttendByStudentId :exec
DELETE FROM student_attend
WHERE student_id = ?
`

func (q *Queries) DeleteStudentAttendByStudentId(ctx context.Context, studentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentAttendByStudentId, studentID)
	return err
}

const getPresenceById = `-- name: GetPresenceById :one
SELECT id, date, used_student_token_quota, duration, class_id, teacher_id, token_id FROM presence
WHERE id = ? LIMIT 1
`

// ============================== PRESENCE ==============================
func (q *Queries) GetPresenceById(ctx context.Context, id int64) (Presence, error) {
	row := q.db.QueryRowContext(ctx, getPresenceById, id)
	var i Presence
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.UsedStudentTokenQuota,
		&i.Duration,
		&i.ClassID,
		&i.TeacherID,
		&i.TokenID,
	)
	return i, err
}

const getPresencesByClassId = `-- name: GetPresencesByClassId :many
SELECT id, date, used_student_token_quota, duration, class_id, teacher_id, token_id FROM presence
WHERE class_id = ?
`

func (q *Queries) GetPresencesByClassId(ctx context.Context, classID sql.NullInt64) ([]Presence, error) {
	rows, err := q.db.QueryContext(ctx, getPresencesByClassId, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Presence
	for rows.Next() {
		var i Presence
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.UsedStudentTokenQuota,
			&i.Duration,
			&i.ClassID,
			&i.TeacherID,
			&i.TokenID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPresencesByTeacherId = `-- name: GetPresencesByTeacherId :many
SELECT id, date, used_student_token_quota, duration, class_id, teacher_id, token_id FROM presence
WHERE teacher_id = ?
`

func (q *Queries) GetPresencesByTeacherId(ctx context.Context, teacherID sql.NullInt64) ([]Presence, error) {
	rows, err := q.db.QueryContext(ctx, getPresencesByTeacherId, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Presence
	for rows.Next() {
		var i Presence
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.UsedStudentTokenQuota,
			&i.Duration,
			&i.ClassID,
			&i.TeacherID,
			&i.TokenID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentAttendsByPresenceId = `-- name: GetStudentAttendsByPresenceId :many
SELECT student_id, presence_id FROM student_attend
WHERE presence_id = ?
`

func (q *Queries) GetStudentAttendsByPresenceId(ctx context.Context, presenceID int64) ([]StudentAttend, error) {
	rows, err := q.db.QueryContext(ctx, getStudentAttendsByPresenceId, presenceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentAttend
	for rows.Next() {
		var i StudentAttend
		if err := rows.Scan(&i.StudentID, &i.PresenceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentAttendsByStudentId = `-- name: GetStudentAttendsByStudentId :many
SELECT student_id, presence_id FROM student_attend
WHERE student_id = ?
`

// ============================== STUDENT_ATTEND ==============================
func (q *Queries) GetStudentAttendsByStudentId(ctx context.Context, studentID int64) ([]StudentAttend, error) {
	rows, err := q.db.QueryContext(ctx, getStudentAttendsByStudentId, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentAttend
	for rows.Next() {
		var i StudentAttend
		if err := rows.Scan(&i.StudentID, &i.PresenceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPresence = `-- name: InsertPresence :execlastid
INSERT INTO presence (
    date, used_student_token_quota, duration, class_id, teacher_id, token_id
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type InsertPresenceParams struct {
	Date                  time.Time
	UsedStudentTokenQuota float64
	Duration              int32
	ClassID               sql.NullInt64
	TeacherID             sql.NullInt64
	TokenID               int64
}

func (q *Queries) InsertPresence(ctx context.Context, arg InsertPresenceParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertPresence,
		arg.Date,
		arg.UsedStudentTokenQuota,
		arg.Duration,
		arg.ClassID,
		arg.TeacherID,
		arg.TokenID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertStudentAttend = `-- name: InsertStudentAttend :exec
INSERT INTO student_attend (
    student_id, presence_id
) VALUES (
    ?, ?
)
`

type InsertStudentAttendParams struct {
	StudentID  int64
	PresenceID int64
}

func (q *Queries) InsertStudentAttend(ctx context.Context, arg InsertStudentAttendParams) error {
	_, err := q.db.ExecContext(ctx, insertStudentAttend, arg.StudentID, arg.PresenceID)
	return err
}
