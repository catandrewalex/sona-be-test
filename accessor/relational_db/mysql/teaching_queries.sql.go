// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: teaching_queries.sql

package mysql

import (
	"context"
	"database/sql"
	"encoding/json"
)

const activateClass = `-- name: ActivateClass :exec
UPDATE class SET is_deactivated = 1 WHERE id = ?
`

func (q *Queries) ActivateClass(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, activateClass, id)
	return err
}

const countStudents = `-- name: CountStudents :one
SELECT Count(user_id) as total_results FROM student
`

func (q *Queries) CountStudents(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countStudents)
	var total_results int64
	err := row.Scan(&total_results)
	return total_results, err
}

const countTeachers = `-- name: CountTeachers :one
SELECT Count(user_id) as total_results FROM teacher
`

func (q *Queries) CountTeachers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTeachers)
	var total_results int64
	err := row.Scan(&total_results)
	return total_results, err
}

const deactivateClass = `-- name: DeactivateClass :exec
UPDATE class SET is_deactivated = 0 WHERE id = ?
`

func (q *Queries) DeactivateClass(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deactivateClass, id)
	return err
}

const deleteClassById = `-- name: DeleteClassById :exec
DELETE FROM class
WHERE id = ?
`

func (q *Queries) DeleteClassById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClassById, id)
	return err
}

const deleteCourseById = `-- name: DeleteCourseById :exec
DELETE FROM course
WHERE id = ?
`

func (q *Queries) DeleteCourseById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCourseById, id)
	return err
}

const deleteGradeById = `-- name: DeleteGradeById :exec
DELETE FROM grade
WHERE id = ?
`

func (q *Queries) DeleteGradeById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGradeById, id)
	return err
}

const deleteInstrumentById = `-- name: DeleteInstrumentById :exec
DELETE FROM instrument
WHERE id = ?
`

func (q *Queries) DeleteInstrumentById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInstrumentById, id)
	return err
}

const deleteStudentById = `-- name: DeleteStudentById :exec
DELETE FROM student
WHERE id = ?
`

func (q *Queries) DeleteStudentById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentById, id)
	return err
}

const deleteStudentByUserId = `-- name: DeleteStudentByUserId :exec
DELETE FROM student
WHERE user_id = ?
`

func (q *Queries) DeleteStudentByUserId(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentByUserId, userID)
	return err
}

const deleteStudentEnrollmentByClassId = `-- name: DeleteStudentEnrollmentByClassId :exec
DELETE FROM student_enrollment
WHERE class_id = ?
`

func (q *Queries) DeleteStudentEnrollmentByClassId(ctx context.Context, classID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentEnrollmentByClassId, classID)
	return err
}

const deleteStudentEnrollmentById = `-- name: DeleteStudentEnrollmentById :exec
DELETE FROM student_enrollment
WHERE id = ?
`

func (q *Queries) DeleteStudentEnrollmentById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentEnrollmentById, id)
	return err
}

const deleteStudentEnrollmentByStudentId = `-- name: DeleteStudentEnrollmentByStudentId :exec
DELETE FROM student_enrollment
WHERE student_id = ?
`

func (q *Queries) DeleteStudentEnrollmentByStudentId(ctx context.Context, studentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentEnrollmentByStudentId, studentID)
	return err
}

const deleteTeacherById = `-- name: DeleteTeacherById :exec
DELETE FROM teacher
WHERE id = ?
`

func (q *Queries) DeleteTeacherById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherById, id)
	return err
}

const deleteTeacherByUserId = `-- name: DeleteTeacherByUserId :exec
DELETE FROM teacher
WHERE user_id = ?
`

func (q *Queries) DeleteTeacherByUserId(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherByUserId, userID)
	return err
}

const deleteTeacherSpecialFeeById = `-- name: DeleteTeacherSpecialFeeById :exec
DELETE FROM teacher_special_fee
WHERE id = ?
`

func (q *Queries) DeleteTeacherSpecialFeeById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherSpecialFeeById, id)
	return err
}

const deleteTeacherSpecialFeeByTeacherId = `-- name: DeleteTeacherSpecialFeeByTeacherId :exec
DELETE FROM teacher_special_fee
WHERE teacher_id = ?
`

func (q *Queries) DeleteTeacherSpecialFeeByTeacherId(ctx context.Context, teacherID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacherSpecialFeeByTeacherId, teacherID)
	return err
}

const getClassById = `-- name: GetClassById :one
SELECT class.id AS class_id, default_transport_fee, class.is_deactivated, course_id, teacher_id, se.student_id AS student_id,
user_teacher.username AS teacher_username,
user_teacher.user_detail AS teacher_detail,
instrument.name AS instrument_name, grade.name AS grade_name,
user_student.username AS student_username,
user_student.user_detail AS student_detail,
course.default_fee, course.default_duration_minute
FROM class
    JOIN course ON course_id = course.id
    JOIN instrument ON course.instrument_id = instrument.id
    JOIN grade ON course.grade_id = grade.id

    LEFT JOIN teacher ON teacher_id = teacher.id
    LEFT JOIN user AS user_teacher ON teacher.user_id = user_teacher.id

    LEFT JOIN student_enrollment AS se ON class.id = se.class_id
    LEFT JOIN user AS user_student ON se.student_id = user_student.id
WHERE class.id = ? LIMIT 1
`

type GetClassByIdRow struct {
	ClassID               int64
	DefaultTransportFee   int64
	IsDeactivated         int32
	CourseID              int64
	TeacherID             sql.NullInt64
	StudentID             sql.NullInt64
	TeacherUsername       sql.NullString
	TeacherDetail         json.RawMessage
	InstrumentName        string
	GradeName             string
	StudentUsername       sql.NullString
	StudentDetail         json.RawMessage
	DefaultFee            int64
	DefaultDurationMinute int32
}

func (q *Queries) GetClassById(ctx context.Context, id int64) (GetClassByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getClassById, id)
	var i GetClassByIdRow
	err := row.Scan(
		&i.ClassID,
		&i.DefaultTransportFee,
		&i.IsDeactivated,
		&i.CourseID,
		&i.TeacherID,
		&i.StudentID,
		&i.TeacherUsername,
		&i.TeacherDetail,
		&i.InstrumentName,
		&i.GradeName,
		&i.StudentUsername,
		&i.StudentDetail,
		&i.DefaultFee,
		&i.DefaultDurationMinute,
	)
	return i, err
}

const getClasses = `-- name: GetClasses :many
SELECT class.id AS class_id, default_transport_fee, class.is_deactivated, course_id, teacher_id, se.student_id AS student_id,
user_teacher.username AS teacher_username,
user_teacher.user_detail AS teacher_detail,
instrument.name AS instrument_name, grade.name AS grade_name,
user_student.username AS student_username,
user_student.user_detail AS student_detail,
course.default_fee, course.default_duration_minute
FROM class
    JOIN course ON course_id = course.id
    JOIN instrument ON course.instrument_id = instrument.id
    JOIN grade ON course.grade_id = grade.id

    LEFT JOIN teacher ON teacher_id = teacher.id
    LEFT JOIN user AS user_teacher ON teacher.user_id = user_teacher.id

    LEFT JOIN student_enrollment AS se ON class.id = se.class_id
    LEFT JOIN user AS user_student ON se.student_id = user_student.id
ORDER BY class.id
LIMIT ? OFFSET ?
`

type GetClassesParams struct {
	Limit  int32
	Offset int32
}

type GetClassesRow struct {
	ClassID               int64
	DefaultTransportFee   int64
	IsDeactivated         int32
	CourseID              int64
	TeacherID             sql.NullInt64
	StudentID             sql.NullInt64
	TeacherUsername       sql.NullString
	TeacherDetail         json.RawMessage
	InstrumentName        string
	GradeName             string
	StudentUsername       sql.NullString
	StudentDetail         json.RawMessage
	DefaultFee            int64
	DefaultDurationMinute int32
}

// ============================== CLASS ==============================
func (q *Queries) GetClasses(ctx context.Context, arg GetClassesParams) ([]GetClassesRow, error) {
	rows, err := q.db.QueryContext(ctx, getClasses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClassesRow
	for rows.Next() {
		var i GetClassesRow
		if err := rows.Scan(
			&i.ClassID,
			&i.DefaultTransportFee,
			&i.IsDeactivated,
			&i.CourseID,
			&i.TeacherID,
			&i.StudentID,
			&i.TeacherUsername,
			&i.TeacherDetail,
			&i.InstrumentName,
			&i.GradeName,
			&i.StudentUsername,
			&i.StudentDetail,
			&i.DefaultFee,
			&i.DefaultDurationMinute,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClassesByStudentId = `-- name: GetClassesByStudentId :many
SELECT class.id AS class_id, default_transport_fee, class.is_deactivated, course_id, teacher_id,
user_teacher.username AS teacher_username,
user_teacher.user_detail AS teacher_detail,
instrument.name AS instrument_name, grade.name AS grade_name,
course.default_fee, course.default_duration_minute
FROM class
    JOIN course ON course_id = course.id
    JOIN instrument ON course.instrument_id = instrument.id
    JOIN grade ON course.grade_id = grade.id

    LEFT JOIN teacher ON teacher_id = teacher.id
    LEFT JOIN user AS user_teacher ON teacher.user_id = user_teacher.id

    LEFT JOIN student_enrollment AS se ON class.id = se.class_id
    LEFT JOIN user AS user_student ON se.student_id = user_student.id
WHERE se.student_id = ?
ORDER BY class.id
`

type GetClassesByStudentIdRow struct {
	ClassID               int64
	DefaultTransportFee   int64
	IsDeactivated         int32
	CourseID              int64
	TeacherID             sql.NullInt64
	TeacherUsername       sql.NullString
	TeacherDetail         json.RawMessage
	InstrumentName        string
	GradeName             string
	DefaultFee            int64
	DefaultDurationMinute int32
}

func (q *Queries) GetClassesByStudentId(ctx context.Context, studentID int64) ([]GetClassesByStudentIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getClassesByStudentId, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClassesByStudentIdRow
	for rows.Next() {
		var i GetClassesByStudentIdRow
		if err := rows.Scan(
			&i.ClassID,
			&i.DefaultTransportFee,
			&i.IsDeactivated,
			&i.CourseID,
			&i.TeacherID,
			&i.TeacherUsername,
			&i.TeacherDetail,
			&i.InstrumentName,
			&i.GradeName,
			&i.DefaultFee,
			&i.DefaultDurationMinute,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClassesByTeacherId = `-- name: GetClassesByTeacherId :many
SELECT class.id AS class_id, default_transport_fee, class.is_deactivated, course_id, se.student_id AS student_id,
instrument.name AS instrument_name, grade.name AS grade_name,
user_student.username AS student_username,
user_student.user_detail AS student_detail,
course.default_fee, course.default_duration_minute
FROM class
    JOIN course ON course_id = course.id
    JOIN instrument ON course.instrument_id = instrument.id
    JOIN grade ON course.grade_id = grade.id

    LEFT JOIN teacher ON teacher_id = teacher.id
    LEFT JOIN user AS user_teacher ON teacher.user_id = user_teacher.id

    LEFT JOIN student_enrollment AS se ON class.id = se.class_id
    LEFT JOIN user AS user_student ON se.student_id = user_student.id
WHERE teacher_id = ?
ORDER BY class.id
`

type GetClassesByTeacherIdRow struct {
	ClassID               int64
	DefaultTransportFee   int64
	IsDeactivated         int32
	CourseID              int64
	StudentID             sql.NullInt64
	InstrumentName        string
	GradeName             string
	StudentUsername       sql.NullString
	StudentDetail         json.RawMessage
	DefaultFee            int64
	DefaultDurationMinute int32
}

func (q *Queries) GetClassesByTeacherId(ctx context.Context, teacherID sql.NullInt64) ([]GetClassesByTeacherIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getClassesByTeacherId, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClassesByTeacherIdRow
	for rows.Next() {
		var i GetClassesByTeacherIdRow
		if err := rows.Scan(
			&i.ClassID,
			&i.DefaultTransportFee,
			&i.IsDeactivated,
			&i.CourseID,
			&i.StudentID,
			&i.InstrumentName,
			&i.GradeName,
			&i.StudentUsername,
			&i.StudentDetail,
			&i.DefaultFee,
			&i.DefaultDurationMinute,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseById = `-- name: GetCourseById :one
SELECT course.id AS course_id, instrument.name AS instrument_name, grade.name AS grade_name, default_fee, default_duration_minute
FROM course
    JOIN instrument ON instrument_id = instrument.id
    JOIN grade ON grade_id = grade.id
WHERE course.id = ? LIMIT 1
`

type GetCourseByIdRow struct {
	CourseID              int64
	InstrumentName        string
	GradeName             string
	DefaultFee            int64
	DefaultDurationMinute int32
}

func (q *Queries) GetCourseById(ctx context.Context, id int64) (GetCourseByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getCourseById, id)
	var i GetCourseByIdRow
	err := row.Scan(
		&i.CourseID,
		&i.InstrumentName,
		&i.GradeName,
		&i.DefaultFee,
		&i.DefaultDurationMinute,
	)
	return i, err
}

const getCourses = `-- name: GetCourses :many
SELECT course.id AS course_id, instrument.name AS instrument_name, grade.name AS grade_name, default_fee, default_duration_minute
FROM course
    JOIN instrument ON instrument_id = instrument.id
    JOIN grade ON grade_id = grade.id
ORDER BY course.id
`

type GetCoursesRow struct {
	CourseID              int64
	InstrumentName        string
	GradeName             string
	DefaultFee            int64
	DefaultDurationMinute int32
}

// ============================== COURSE ==============================
func (q *Queries) GetCourses(ctx context.Context) ([]GetCoursesRow, error) {
	rows, err := q.db.QueryContext(ctx, getCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCoursesRow
	for rows.Next() {
		var i GetCoursesRow
		if err := rows.Scan(
			&i.CourseID,
			&i.InstrumentName,
			&i.GradeName,
			&i.DefaultFee,
			&i.DefaultDurationMinute,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCoursesByGradeId = `-- name: GetCoursesByGradeId :many
SELECT course.id AS course_id, instrument.name AS instrument_name, grade.name AS grade_name, default_fee, default_duration_minute
FROM course
    JOIN instrument ON instrument_id = instrument.id
    JOIN grade ON grade_id = grade.id
WHERE grade.id = ?
ORDER BY course.id
`

type GetCoursesByGradeIdRow struct {
	CourseID              int64
	InstrumentName        string
	GradeName             string
	DefaultFee            int64
	DefaultDurationMinute int32
}

func (q *Queries) GetCoursesByGradeId(ctx context.Context, id int64) ([]GetCoursesByGradeIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getCoursesByGradeId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCoursesByGradeIdRow
	for rows.Next() {
		var i GetCoursesByGradeIdRow
		if err := rows.Scan(
			&i.CourseID,
			&i.InstrumentName,
			&i.GradeName,
			&i.DefaultFee,
			&i.DefaultDurationMinute,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCoursesByInstrumentId = `-- name: GetCoursesByInstrumentId :many
SELECT course.id AS course_id, instrument.name AS instrument_name, grade.name AS grade_name, default_fee, default_duration_minute
FROM course
    JOIN instrument ON instrument_id = instrument.id
    JOIN grade ON grade_id = grade.id
WHERE instrument.id = ?
ORDER BY course.id
`

type GetCoursesByInstrumentIdRow struct {
	CourseID              int64
	InstrumentName        string
	GradeName             string
	DefaultFee            int64
	DefaultDurationMinute int32
}

func (q *Queries) GetCoursesByInstrumentId(ctx context.Context, id int64) ([]GetCoursesByInstrumentIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getCoursesByInstrumentId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCoursesByInstrumentIdRow
	for rows.Next() {
		var i GetCoursesByInstrumentIdRow
		if err := rows.Scan(
			&i.CourseID,
			&i.InstrumentName,
			&i.GradeName,
			&i.DefaultFee,
			&i.DefaultDurationMinute,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGradeById = `-- name: GetGradeById :one
SELECT id, name FROM grade
WHERE id = ? LIMIT 1
`

// ============================== GRADE ==============================
func (q *Queries) GetGradeById(ctx context.Context, id int64) (Grade, error) {
	row := q.db.QueryRowContext(ctx, getGradeById, id)
	var i Grade
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getInstrumentById = `-- name: GetInstrumentById :one
SELECT id, name FROM instrument
WHERE id = ? LIMIT 1
`

// ============================== INSTRUMENT ==============================
func (q *Queries) GetInstrumentById(ctx context.Context, id int64) (Instrument, error) {
	row := q.db.QueryRowContext(ctx, getInstrumentById, id)
	var i Instrument
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getStudentById = `-- name: GetStudentById :one
SELECT student.id, user.id AS user_id, username, email, user_detail, privilege_type, is_deactivated, created_at
FROM student JOIN user ON student.user_id = user.id
WHERE student.id = ? LIMIT 1
`

type GetStudentByIdRow struct {
	ID            int64
	UserID        int64
	Username      string
	Email         string
	UserDetail    json.RawMessage
	PrivilegeType int32
	IsDeactivated int32
	CreatedAt     sql.NullTime
}

// ============================== STUDENT ==============================
func (q *Queries) GetStudentById(ctx context.Context, id int64) (GetStudentByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getStudentById, id)
	var i GetStudentByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.UserDetail,
		&i.PrivilegeType,
		&i.IsDeactivated,
		&i.CreatedAt,
	)
	return i, err
}

const getStudentByUserId = `-- name: GetStudentByUserId :one
SELECT student.id, user.id AS user_id, username, email, user_detail, privilege_type, is_deactivated, created_at
FROM student JOIN user ON student.user_id = user.id
WHERE user_id = ? LIMIT 1
`

type GetStudentByUserIdRow struct {
	ID            int64
	UserID        int64
	Username      string
	Email         string
	UserDetail    json.RawMessage
	PrivilegeType int32
	IsDeactivated int32
	CreatedAt     sql.NullTime
}

func (q *Queries) GetStudentByUserId(ctx context.Context, userID int64) (GetStudentByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, getStudentByUserId, userID)
	var i GetStudentByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.UserDetail,
		&i.PrivilegeType,
		&i.IsDeactivated,
		&i.CreatedAt,
	)
	return i, err
}

const getStudentEnrollmentsByClassId = `-- name: GetStudentEnrollmentsByClassId :many
SELECT id, student_id, class_id FROM student_enrollment
WHERE class_id = ?
`

func (q *Queries) GetStudentEnrollmentsByClassId(ctx context.Context, classID int64) ([]StudentEnrollment, error) {
	rows, err := q.db.QueryContext(ctx, getStudentEnrollmentsByClassId, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentEnrollment
	for rows.Next() {
		var i StudentEnrollment
		if err := rows.Scan(&i.ID, &i.StudentID, &i.ClassID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentEnrollmentsByStudentId = `-- name: GetStudentEnrollmentsByStudentId :many
SELECT id, student_id, class_id FROM student_enrollment
WHERE student_id = ?
`

// ============================== STUDENT_ENROLLMENT ==============================
func (q *Queries) GetStudentEnrollmentsByStudentId(ctx context.Context, studentID int64) ([]StudentEnrollment, error) {
	rows, err := q.db.QueryContext(ctx, getStudentEnrollmentsByStudentId, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentEnrollment
	for rows.Next() {
		var i StudentEnrollment
		if err := rows.Scan(&i.ID, &i.StudentID, &i.ClassID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudents = `-- name: GetStudents :many
SELECT student.id, user.id AS user_id, username, email, user_detail, privilege_type, is_deactivated, created_at
FROM student JOIN user ON student.user_id = user.id
ORDER BY username
LIMIT ? OFFSET ?
`

type GetStudentsParams struct {
	Limit  int32
	Offset int32
}

type GetStudentsRow struct {
	ID            int64
	UserID        int64
	Username      string
	Email         string
	UserDetail    json.RawMessage
	PrivilegeType int32
	IsDeactivated int32
	CreatedAt     sql.NullTime
}

func (q *Queries) GetStudents(ctx context.Context, arg GetStudentsParams) ([]GetStudentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentsRow
	for rows.Next() {
		var i GetStudentsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.UserDetail,
			&i.PrivilegeType,
			&i.IsDeactivated,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeacherById = `-- name: GetTeacherById :one
SELECT teacher.id, user.id AS user_id, username, email, user_detail, privilege_type, is_deactivated, created_at
FROM teacher JOIN user ON teacher.user_id = user.id
WHERE teacher.id = ? LIMIT 1
`

type GetTeacherByIdRow struct {
	ID            int64
	UserID        int64
	Username      string
	Email         string
	UserDetail    json.RawMessage
	PrivilegeType int32
	IsDeactivated int32
	CreatedAt     sql.NullTime
}

// ============================== TEACHER ==============================
func (q *Queries) GetTeacherById(ctx context.Context, id int64) (GetTeacherByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTeacherById, id)
	var i GetTeacherByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.UserDetail,
		&i.PrivilegeType,
		&i.IsDeactivated,
		&i.CreatedAt,
	)
	return i, err
}

const getTeacherByUserId = `-- name: GetTeacherByUserId :one
SELECT teacher.id, user.id AS user_id, username, email, user_detail, privilege_type, is_deactivated, created_at
FROM teacher JOIN user ON teacher.user_id = user.id
WHERE user_id = ? LIMIT 1
`

type GetTeacherByUserIdRow struct {
	ID            int64
	UserID        int64
	Username      string
	Email         string
	UserDetail    json.RawMessage
	PrivilegeType int32
	IsDeactivated int32
	CreatedAt     sql.NullTime
}

func (q *Queries) GetTeacherByUserId(ctx context.Context, userID int64) (GetTeacherByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTeacherByUserId, userID)
	var i GetTeacherByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.UserDetail,
		&i.PrivilegeType,
		&i.IsDeactivated,
		&i.CreatedAt,
	)
	return i, err
}

const getTeacherSpecialFeeById = `-- name: GetTeacherSpecialFeeById :one
SELECT id, fee, teacher_id, course_id FROM teacher_special_fee
WHERE id = ? LIMIT 1
`

// ============================== TEACHER_SPECIAL_FEE ==============================
func (q *Queries) GetTeacherSpecialFeeById(ctx context.Context, id int64) (TeacherSpecialFee, error) {
	row := q.db.QueryRowContext(ctx, getTeacherSpecialFeeById, id)
	var i TeacherSpecialFee
	err := row.Scan(
		&i.ID,
		&i.Fee,
		&i.TeacherID,
		&i.CourseID,
	)
	return i, err
}

const getTeacherSpecialFeesByTeacherId = `-- name: GetTeacherSpecialFeesByTeacherId :many
SELECT id, fee, teacher_id, course_id FROM teacher_special_fee
WHERE teacher_id = ?
`

func (q *Queries) GetTeacherSpecialFeesByTeacherId(ctx context.Context, teacherID int64) ([]TeacherSpecialFee, error) {
	rows, err := q.db.QueryContext(ctx, getTeacherSpecialFeesByTeacherId, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeacherSpecialFee
	for rows.Next() {
		var i TeacherSpecialFee
		if err := rows.Scan(
			&i.ID,
			&i.Fee,
			&i.TeacherID,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeacherSpecialFeesByTeacherIdAndCourseId = `-- name: GetTeacherSpecialFeesByTeacherIdAndCourseId :many
SELECT id, fee, teacher_id, course_id FROM teacher_special_fee
WHERE teacher_id = ? AND course_id = ?
`

type GetTeacherSpecialFeesByTeacherIdAndCourseIdParams struct {
	TeacherID int64
	CourseID  int64
}

func (q *Queries) GetTeacherSpecialFeesByTeacherIdAndCourseId(ctx context.Context, arg GetTeacherSpecialFeesByTeacherIdAndCourseIdParams) ([]TeacherSpecialFee, error) {
	rows, err := q.db.QueryContext(ctx, getTeacherSpecialFeesByTeacherIdAndCourseId, arg.TeacherID, arg.CourseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeacherSpecialFee
	for rows.Next() {
		var i TeacherSpecialFee
		if err := rows.Scan(
			&i.ID,
			&i.Fee,
			&i.TeacherID,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeachers = `-- name: GetTeachers :many
SELECT teacher.id, user.id AS user_id, username, email, user_detail, privilege_type, is_deactivated, created_at, Count(user_id) as total_results
FROM teacher JOIN user ON teacher.user_id = user.id
ORDER BY username
LIMIT ? OFFSET ?
`

type GetTeachersParams struct {
	Limit  int32
	Offset int32
}

type GetTeachersRow struct {
	ID            int64
	UserID        int64
	Username      string
	Email         string
	UserDetail    json.RawMessage
	PrivilegeType int32
	IsDeactivated int32
	CreatedAt     sql.NullTime
	TotalResults  int64
}

func (q *Queries) GetTeachers(ctx context.Context, arg GetTeachersParams) ([]GetTeachersRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeachers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeachersRow
	for rows.Next() {
		var i GetTeachersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.UserDetail,
			&i.PrivilegeType,
			&i.IsDeactivated,
			&i.CreatedAt,
			&i.TotalResults,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertClass = `-- name: InsertClass :execlastid
INSERT INTO class (
    default_transport_fee, teacher_id, course_id, is_deactivated
) VALUES (
    ?, ?, ?, ?
)
`

type InsertClassParams struct {
	DefaultTransportFee int64
	TeacherID           sql.NullInt64
	CourseID            int64
	IsDeactivated       int32
}

func (q *Queries) InsertClass(ctx context.Context, arg InsertClassParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertClass,
		arg.DefaultTransportFee,
		arg.TeacherID,
		arg.CourseID,
		arg.IsDeactivated,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertCourse = `-- name: InsertCourse :execlastid
INSERT INTO course (
    default_fee, default_duration_minute, instrument_id, grade_id
) VALUES (
    ?, ?, ?, ?
)
`

type InsertCourseParams struct {
	DefaultFee            int64
	DefaultDurationMinute int32
	InstrumentID          int64
	GradeID               int64
}

func (q *Queries) InsertCourse(ctx context.Context, arg InsertCourseParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertCourse,
		arg.DefaultFee,
		arg.DefaultDurationMinute,
		arg.InstrumentID,
		arg.GradeID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertGrade = `-- name: InsertGrade :execlastid
INSERT INTO grade ( name ) VALUES ( ? )
`

func (q *Queries) InsertGrade(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertGrade, name)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertInstrument = `-- name: InsertInstrument :execlastid
INSERT INTO instrument ( name ) VALUES ( ? )
`

func (q *Queries) InsertInstrument(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertInstrument, name)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertStudent = `-- name: InsertStudent :execlastid
INSERT INTO student ( user_id ) VALUES ( ? )
`

func (q *Queries) InsertStudent(ctx context.Context, userID int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertStudent, userID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertStudentEnrollment = `-- name: InsertStudentEnrollment :exec
INSERT INTO student_enrollment (
    student_id, class_id
) VALUES (
    ?, ?
)
`

type InsertStudentEnrollmentParams struct {
	StudentID int64
	ClassID   int64
}

func (q *Queries) InsertStudentEnrollment(ctx context.Context, arg InsertStudentEnrollmentParams) error {
	_, err := q.db.ExecContext(ctx, insertStudentEnrollment, arg.StudentID, arg.ClassID)
	return err
}

const insertTeacher = `-- name: InsertTeacher :execlastid
INSERT INTO teacher ( user_id ) VALUES ( ? )
`

func (q *Queries) InsertTeacher(ctx context.Context, userID int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertTeacher, userID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertTeacherSpecialFee = `-- name: InsertTeacherSpecialFee :execlastid
INSERT INTO teacher_special_fee (
    fee, teacher_id, course_id
) VALUES (
    ?, ?, ?
)
`

type InsertTeacherSpecialFeeParams struct {
	Fee       int64
	TeacherID int64
	CourseID  int64
}

func (q *Queries) InsertTeacherSpecialFee(ctx context.Context, arg InsertTeacherSpecialFeeParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertTeacherSpecialFee, arg.Fee, arg.TeacherID, arg.CourseID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const updateClassCourse = `-- name: UpdateClassCourse :exec
UPDATE class SET course_id = ? WHERE id = ?
`

type UpdateClassCourseParams struct {
	CourseID int64
	ID       int64
}

func (q *Queries) UpdateClassCourse(ctx context.Context, arg UpdateClassCourseParams) error {
	_, err := q.db.ExecContext(ctx, updateClassCourse, arg.CourseID, arg.ID)
	return err
}

const updateClassInfo = `-- name: UpdateClassInfo :exec
UPDATE class SET default_transport_fee = ? WHERE id = ?
`

type UpdateClassInfoParams struct {
	DefaultTransportFee int64
	ID                  int64
}

func (q *Queries) UpdateClassInfo(ctx context.Context, arg UpdateClassInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateClassInfo, arg.DefaultTransportFee, arg.ID)
	return err
}

const updateClassTeacher = `-- name: UpdateClassTeacher :exec
UPDATE class SET teacher_id = ? WHERE id = ?
`

type UpdateClassTeacherParams struct {
	TeacherID sql.NullInt64
	ID        int64
}

func (q *Queries) UpdateClassTeacher(ctx context.Context, arg UpdateClassTeacherParams) error {
	_, err := q.db.ExecContext(ctx, updateClassTeacher, arg.TeacherID, arg.ID)
	return err
}

const updateCourseGrade = `-- name: UpdateCourseGrade :exec
UPDATE course SET grade_id = ? where id = ?
`

type UpdateCourseGradeParams struct {
	GradeID int64
	ID      int64
}

func (q *Queries) UpdateCourseGrade(ctx context.Context, arg UpdateCourseGradeParams) error {
	_, err := q.db.ExecContext(ctx, updateCourseGrade, arg.GradeID, arg.ID)
	return err
}

const updateCourseInfo = `-- name: UpdateCourseInfo :exec
UPDATE course SET default_fee = ?, default_duration_minute = ? where id = ?
`

type UpdateCourseInfoParams struct {
	DefaultFee            int64
	DefaultDurationMinute int32
	ID                    int64
}

func (q *Queries) UpdateCourseInfo(ctx context.Context, arg UpdateCourseInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateCourseInfo, arg.DefaultFee, arg.DefaultDurationMinute, arg.ID)
	return err
}

const updateCourseInstrument = `-- name: UpdateCourseInstrument :exec
UPDATE course SET instrument_id = ? where id = ?
`

type UpdateCourseInstrumentParams struct {
	InstrumentID int64
	ID           int64
}

func (q *Queries) UpdateCourseInstrument(ctx context.Context, arg UpdateCourseInstrumentParams) error {
	_, err := q.db.ExecContext(ctx, updateCourseInstrument, arg.InstrumentID, arg.ID)
	return err
}
